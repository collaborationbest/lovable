
// Importing required modules
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.43.1';

// CORS headers for browser compatibility
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Serve HTTP requests
serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders, status: 204 });
  }

  try {
    // Parse the request body
    const { existingItems, userMessage } = await req.json();
    
    // Create a Supabase client with Deno API
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '',
      {
        global: {
          headers: { Authorization: req.headers.get('Authorization')! },
        },
      }
    );

    // Obtenez le message de l'utilisateur ou utilisez un message par d√©faut
    const prompt = userMessage || "Sugg√©rez une nouvelle √©tape pour ma feuille de route de cr√©ation de cabinet dentaire";
    
    // Pr√©parez le contexte pour le mod√®le
    const context = {
      existingItems: existingItems.map(item => ({
        title: item.title,
        description: item.description,
        steps: item.steps
      }))
    };

    // Convertir le contexte en texte pour l'inclure dans le prompt
    const contextText = JSON.stringify(context, null, 2);
    
    // Appeler l'API OpenAI via la fonction Edge
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${Deno.env.get('OPENAI_API_KEY')}`
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: `Tu es un assistant sp√©cialis√© dans la cr√©ation de feuilles de route pour l'installation de cabinets dentaires.
            Ton objectif est d'analyser les √©tapes existantes et de proposer une nouvelle √©tape compl√©mentaire et coh√©rente.
            Chaque √©tape comprend un titre, une description concise, et une liste de 5 sous-√©tapes pratiques.
            R√©ponds de mani√®re conversationnelle √† l'utilisateur tout en g√©n√©rant une nouvelle √©tape au format JSON.
            La nouvelle √©tape doit √™tre diff√©rente des √©tapes existantes et apporter une r√©elle valeur ajout√©e.
            Voici le format de r√©ponse attendu:
            {
              "message": "Ta r√©ponse conversationnelle √† l'utilisateur...",
              "item": {
                "title": "Titre de l'√©tape avec une emoji üìã",
                "description": "Description concise de l'√©tape",
                "steps": ["Sous-√©tape 1", "Sous-√©tape 2", "Sous-√©tape 3", "Sous-√©tape 4", "Sous-√©tape 5"]
              }
            }
            IMPORTANT: Inclus toujours une emoji pertinente dans le titre de l'√©tape.`
          },
          {
            role: "user",
            content: `Voici mes √©tapes existantes dans ma feuille de route d'installation de cabinet dentaire:
            
            ${contextText}
            
            Requ√™te de l'utilisateur: "${prompt}"
            
            G√©n√®re une nouvelle √©tape pertinente qui n'existe pas d√©j√† dans la liste, avec une r√©ponse conversationnelle.`
          }
        ],
        temperature: 0.7,
        max_tokens: 1000
      })
    });
    
    const data = await response.json();
    
    if (!data.choices || data.choices.length === 0) {
      throw new Error("Pas de r√©ponse de l'API");
    }
    
    // Parse la r√©ponse 
    const assistantResponse = data.choices[0].message.content;
    let parsedResponse;
    
    try {
      // Essayer d'extraire et de parser le JSON de la r√©ponse
      const jsonMatch = assistantResponse.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        parsedResponse = JSON.parse(jsonMatch[0]);
      } else {
        throw new Error("Format de r√©ponse invalide");
      }
    } catch (error) {
      console.error("Erreur lors du parsing de la r√©ponse:", error);
      // Fallback avec une r√©ponse g√©n√©rique
      parsedResponse = {
        message: "J'ai cr√©√© une nouvelle √©tape pour votre feuille de route.",
        item: {
          title: "Nouvelle √©tape üìã",
          description: "Une √©tape suppl√©mentaire pour votre feuille de route",
          steps: [
            "Premi√®re action √† r√©aliser",
            "Deuxi√®me action √† r√©aliser",
            "Troisi√®me action √† r√©aliser",
            "Quatri√®me action √† r√©aliser",
            "Cinqui√®me action √† r√©aliser"
          ]
        }
      };
    }
    
    // Return the processed data with CORS headers
    return new Response(
      JSON.stringify(parsedResponse),
      { 
        headers: {
          ...corsHeaders,
          "Content-Type": "application/json"
        }
      },
    );
  } catch (error) {
    // Handle errors
    console.error("Error processing request:", error);
    
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        status: 500, 
        headers: {
          ...corsHeaders,
          "Content-Type": "application/json"
        }
      },
    );
  }
});
